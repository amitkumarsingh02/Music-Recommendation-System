# -*- coding: utf-8 -*-
"""Algorithm - Using Album, Artist, Genre [1-21] Ratings

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/155amDMQnrR5a4ua67Lbn8wDKZMZZQTbd
"""

"""### Method 4: Ensemble

Linear Ensembling optimized linear combination of all the predictions to approximate the ground truth solution.

Then these weights are applied to submissions and sum them. We get an ensembled solution by assigning predictions to the top and bottom three tracks in every six elements.
"""

import pandas as pd
import numpy as np
import os
import csv
import warnings
warnings.filterwarnings("ignore")

S = []
P = []

files = []
with open('Score.csv', newline='') as csvfile:
    scoreFile = csv.reader(csvfile, delimiter=',')
    next(scoreFile)
    for line in scoreFile:
        files.append(str(line[0]))
        P.append(float(line[1]))

P #scores

"""The submission folder contains all submitted files, and all data frames will be appended to the S array."""

dir = './kaggle_submissions/'
subs = pd.DataFrame()

for filename in files:
    filename = dir + filename
    data = pd.read_csv(filename)
    data['Predictor'] = data['Predictor'].astype(np.int64)
    data = data.sort_values(by = ['TrackID'], ascending = [True])
    S.append(data)
    print(filename)

# Drop TrackID
# renaming Predictor to s[n]
for i in range(len(S)):
    S[i].drop(columns='TrackID', inplace=True)
    S[i].rename(columns={"Predictor":"s"+str(i+1)}, inplace=True)

"""The zeros must be replaced with -1's as to avoid decrepencies in the element-by-element multiplications."""

for i in range(len(S)):
    S[i]['s'+str(i+1)] = 2.0*S[i]['s'+str(i+1)] - 1.0

"""### S matrix"""

s_matrix = pd.concat(S, axis=1)
s_matrix.shape
sT_x = np.zeros((s_matrix.shape[1],1))

"""### $(S^{T}S)^{-1}$
### $S^{T}x = N(2P_{i}-1)$
"""

N = s_matrix.shape[0]
for i in range(len(sT_x)):
    sT_x[i] = N*((2.0*P[i]) - 1.0)

s_matrix = s_matrix.to_numpy()
ST_S = np.dot(s_matrix.T, s_matrix).astype('float') + np.eye(s_matrix .shape[1]) * (10 ** -6)
ST_S_inv = np.linalg.inv(ST_S)

"""Least square vector is caculated by taking the dot product of ST_S_inv and sT_x matricies."""

als = np.dot(ST_S_inv, sT_x)

"""The weights applied to the S_matrix.
 $S_{ensembled}$ 
"""

s_ensemble = np.matmul(s_matrix, als)
s_ensemble[0:6][::-1].sort()

pred = pd.read_csv('./kaggle_submissions/Predictions_mean.csv')
for i in range(len(pred)):
    pred['Predictor'][i] = s_ensemble[i]

start=0
end=6
while end <=120000:
    pred['Predictor'][pred['Predictor'][start:end].nlargest(3).index[0:3]] = 1.0
    start=end
    end +=6
    
for i in range(len(pred)):
    if pred['Predictor'][i] != 1.0:
        pred['Predictor'][i] = 0.0
        
pred['Predictor'] = np.int64(pred['Predictor'])
pred['Predictor'].value_counts()
pred.to_csv('./kaggle_submissions/ensemble_final.csv', index=False)



